trigger: none
#- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  tenantId: '590ddbab-e219-46a7-9e90-1d43bf8b91bd'  # Replace with your actual AD tenant ID
  clientId: 'f9c2b83f-5529-4e48-aab5-d4bc3bcaeceb'  # Replace with your actual client ID  
  workspaceName: 'eramus-devops'  # Replace with your actual Power BI workspace name
  workspaceId : 'c678790d-d7cf-4fe5-b778-5970d51e27ea'
  

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Install-Module -Name MicrosoftPowerBIMgmt -Force -AllowClobber
      Import-Module -Name MicrosoftPowerBIMgmt

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/Reports'  # Replace with the actual path to your .pbix files
    artifact: 'pbixArtifact'
    publishLocation: 'pipeline'

- task: DownloadPipelineArtifact@2
  inputs:
    artifact: 'pbixArtifact'
    targetPath: '$(Pipeline.Workspace)'
- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'masterconnection'
    KeyVaultName: 'devpowerbi-kv'
    SecretsFilter: 'clientSecret'
    RunAsPreJob: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Variables
      $tenantId = "$(tenantId)"
      $clientId = "$(clientId)"
      $clientSecret = "$(clientSecret)"  # Ensure the secret is correctly referenced
      $workspaceName = "$(workspaceName)"
      $workspaceId = "$(workspaceId)"
      $reportsPath = "$(System.DefaultWorkingDirectory)/Reports"

      # Log the values to ensure they are being retrieved correctly
      Write-Output "Tenant ID: $tenantId"
      Write-Output "Client ID: $clientId"
      Write-Output "Client Secret: $clientSecret"
      Write-Output "Workspace Name: $workspaceName"
      Write-Output "Workspace ID: $workspaceId"

      # Ensure the Power BI Management module is imported
      Import-Module -Name MicrosoftPowerBIMgmt

      # Convert client secret to secure string
      $secureClientSecret = ConvertTo-SecureString $clientSecret -AsPlainText -Force

      # Log the secure string conversion
      Write-Output "Secure Client Secret: $secureClientSecret"

      # Create PSCredential object
      $credentials = New-Object System.Management.Automation.PSCredential ($clientId, $secureClientSecret)

      # Log the credential creation
      Write-Output "Credentials created: $credentials"

      # Connect to Power BI using a service principal
      Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credentials -Tenant $tenantId

      # Log the connection status
      if ($?) {
        Write-Output "Connected to Power BI Service Account successfully."
      } else {
        Write-Error "Failed to connect to Power BI Service Account."
        exit 1
      }

      # Get all .pbix files in the Reports directory
      $pbixFiles = Get-ChildItem -Path $reportsPath -Filter *.pbix

      # Upload PBIX files
      foreach ($pbixFile in $pbixFiles) {
        $filePath = $pbixFile.FullName
        Write-Output "Uploading report: $($pbixFile.Name)"
        try {
          #Import-PowerBIReport -WorkspaceId $workspaceName -Path $filePath -ConflictAction Overwrite
          New-PowerBIReport -Path $filePath -WorkspaceId $workspaceid -ConflictAction CreateOrOverwrite
          Write-Output "Uploaded report: $($pbixFile.Name)"
        } catch {
          Write-Error "Failed to upload report: $($pbixFile.Name). Error: $_"
          exit 1
        }
      }
