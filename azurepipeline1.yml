trigger: none
#- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  tenantId: '835f6712-aeca-416a-8b76-d4dad8d12381'  # Replace with your actual tenant ID
  clientId: 'cdd1cb32-8cea-4768-b972-5f937c78cfe8'  # Replace with your actual client ID
  clientSecret: ''  # Store this as a secret variable in Azure DevOps
  workspaceName: 'Erasmus_DevOps'
  pbixFileName: 'eramusreport.pbix'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Install-Module -Name MicrosoftPowerBIMgmt -Force -AllowClobber

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/$(pbixFileName)'  # Replace with the actual path to your .pbix file
    artifact: 'pbixArtifact'
    publishLocation: 'pipeline'

- task: DownloadPipelineArtifact@2
  inputs:
    artifact: 'pbixArtifact'
    targetPath: '$(Pipeline.Workspace)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $pbixFilePath = "$(Pipeline.Workspace)/$(pbixFileName)"
      # Check if the file exists
      if (-Not (Test-Path -Path $pbixFilePath)) {
        Write-Error "File not found: $pbixFilePath"
        exit 1
      }

      # Connect to Power BI using a service principal
      $DeploymentPrincipalAppId = "$(clientId)"
      $DeploymentPrincipalAppSecret = "$(clientSecret)"
      $tenantID = "$(tenantId)"

      $credentials = New-Object System.Management.Automation.PSCredential ($DeploymentPrincipalAppId, (convertto-securestring $DeploymentPrincipalAppSecret -asplaintext -force))
      Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credentials -Tenant $tenantID

      # Log the connection status
      if ($?) {
        Write-Host "Connected to Power BI Service Account successfully."
      } else {
        Write-Error "Failed to connect to Power BI Service Account."
        exit 1
      }

      # Get the workspace and upload the report
      $workspace = Get-PowerBIWorkspace -Name '$(workspaceName)' 
      if ($workspace) {
        Write-Host "Workspace found: $($workspace.Name)"
        New-PowerBIReport -Path $pbixFilePath -WorkspaceId $workspace.Id -ConflictAction CreateOrOverwrite
      } else {
        Write-Error "Workspace not found: $(workspaceName)"
        exit 1
      }
