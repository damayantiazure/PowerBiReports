

trigger: none
#- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Install-Module -Name MicrosoftPowerBIMgmt -Force -AllowClobber
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/eramusreport.pbix'  # Replace with the actual path to your .pbix file
    artifact: 'pbixArtifact'
    publishLocation: 'pipeline'      
- task: DownloadPipelineArtifact@2
  inputs:
    artifact: 'pbixArtifact'
    targetPath: '$(Pipeline.Workspace)'   


- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Variables
      $tenantId = "835f6712-aeca-416a-8b76-d4dad8d12381"
      $clientId = "cdd1cb32-8cea-4768-b972-5f937c78cfe8"
      $clientSecret = "O.g8Q~xTDTFlObwGm75fqkRRIDLr8pNDp1I45crQ"  # Securely store the secret in pipeline variables
      $workspaceId = "17e6dcd9-6633-40e1-bb3a-274e5f1520d9"
      $filePath = "$(Pipeline.Workspace)/eramusreport.pbix"

      # Check if the file exists
      if (-Not (Test-Path -Path $filePath)) {
        Write-Error "File not found: $filePath"
        exit 1
      }

      # Authenticate with Azure AD
      $body = @{
        grant_type    = "client_credentials"
        client_id     = $clientId
        client_secret = $clientSecret
        resource      = "https://analysis.windows.net/powerbi/api"
      }
      
      $tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$tenantId/oauth2/token" -Method Post -ContentType "application/x-www-form-urlencoded" -Body $body
      $accessToken = $tokenResponse.access_token

      # Upload the .pbix file
      $headers = @{
        Authorization = "Bearer $accessToken"
      }
      
      $uri = "https://api.powerbi.com/v1.0/myorg/groups/$workspaceId/imports?datasetDisplayName=eramusreport"
      Write-Host "Upload URI: $uri"

      $params = @{
        Uri         = $uri
        Method      = "Post"
        Headers     = $headers
        InFile      = $filePath
        ContentType = "application/octet-stream"
      }

      try {
        $response = Invoke-RestMethod @params
        Write-Host "File uploaded successfully. Response: $($response | ConvertTo-Json -Depth 10)"
      } catch {
        Write-Error "Failed to upload file: $_"
        throw $_
      }